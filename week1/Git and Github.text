Git and Github
--------------
Git is a version tracking program used to track changes to files and folders.
Git allows you to switch back to older versions of these files.
--
Github is a website, a social website where instead of photos of partying 
with your friends you post files of code to program with your friends.

-------------
some commands for Terminal:
--
$ ls  in mac         $ dir   in windows
see what the contents of ~

--
$ cd C:\Users\sam\Desktop
 move to a folder is cd. CD stands for “change directory.”

--
$ mkdir folder
make a new folder

--
$ cd ..
go back

--
$ > type nul > filename.txt    in windows        $ touch filename.txt     in mac
create new file 

--
$clear 
clear Terminal

-------------
Setting up Git
-------------

$ git config --global user.name "ismail fiki"
$ git config --global user.email "smailfiki0808@gmail.com"

--
$ git init
To start tracking a project with Git you need to tell Git to start doing so

--
$ git status
What does Git know about the folder you are working on 
and its contents, and how do we find out what Git knows?

---
Staging:
Git uses a concept called a “staging area.” 
This is a liminal “space” between changes to files and a commit.

--
$ git add              filename or folder 
Files are added to Git by typing git add and then the name of the file:

--
Always Leave A Message:
When making a commit with Git you are required to leave a message.
--
$ git commit -m "your message here"
The command to make a commit is git commit -m.
 The -m is to leave a message. Always leave a message.
--
$ git diff
to get the defirance betwen file 

--
$ git branch 
show you the branch bieng working on locally

--
$ git clone URL
 creates a local copy of a project that already exists remotely.
The clone includes all the project’s files, history, and branches.

--
$ git merge  baranchname      // marge a branch to working branch   
merges lines of development together. This command is typically used
 to combine changes made on two distinct branches. 
 For example,a developer would merge when they want to combine changes 
 from a feature branch into the master branch for deployment

--
$ git pull
update your local code from remote like (Github)

--
$ git log 
show you all the commit and message

-------------
Sign up for a Github Account
-------------

1- create A repository

--
2-Telling Git about Github
git remote add origin https://github.com/smail0808/programmingAtoZ.git

We are adding a remote to this Git repository. A remote is another computer
that we want to share our repository with. Remotes are URLs.
But those URLs are long so we can give the remote a name,
in our case origin, so we don’t have to type the entire URL over and over.

--
$ git push -u origin master
this well puch the git saved files to github
origin: URLs
master: workspace we are working on 

-------------
Menaging file Using Git
-------------
The git push command is used to write to a remote repository.
Your locally project to you Github Account
$ git push  o---->  Github
$ git push origin master
--
pull the change from Github to your locally project
$ git pull  <----o  Github  
--
Adding Remote Repositories:
$ git remote add john http://dev.example.com/john.git
--
Inspecting a Remote:
$ git remote show origin

--
:q to get out off vim 
-------------
clonig from github to localy
-------------
git clone URL                    //  clone repository from github
git status                       // get the sta of the file 
git  commit -a -m "message"      // commit change 
git pull                         // pull any change that happen remotely
git push origin master           // push the change 


-------------
work locally and push to github
-------------
git init                             // add git to the project
git add .                            // to add any file that changed
git remote add originname url        // add a remote name originname 
git push origin master               // push the change 
git pull originname master           // pull the change from github


-------------
Github pages
-------------
 "gh-pages" branch

  ----------------------------------
get repository from github and pull it in other branch
 ----------------------------------
 git remote add originname url               // add a remote name originname 
 $ git branch baranchname                    // create a branch
 $ git checkout baranchname                  // go to a branch
 $ git pull originname baranchname 
























